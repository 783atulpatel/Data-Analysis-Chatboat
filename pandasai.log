2024-08-02 23:59:13 [INFO] Question: coloured barplot for outlier detection
2024-08-02 23:59:13 [INFO] Running PandasAI with google-palm LLM...
2024-08-02 23:59:13 [INFO] Prompt ID: 78204d3f-3494-4a9e-8973-e3534e1b5e6b
2024-08-02 23:59:13 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-02 23:59:13 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-02 23:59:13 [INFO] Executing Step 1: CacheLookup
2024-08-02 23:59:13 [INFO] Executing Step 2: PromptGeneration
2024-08-02 23:59:13 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-01-20,142.27000427246094,165.22999572753906,63.209999084472656,7929059527,94.0,10320000,AMZN
2022-09-15,149.66000366210938,160.32000732421875,47.40999984741211,7291535562,517.9649658203125,131556500,BA
2022-07-11,87.55000305175781,190.16000366210935,147.25,4923350352,103.31470489501952,1072000,NIO
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 coloured barplot for outlier detection

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-02 23:59:13 [INFO] Executing Step 3: CodeGenerator
2024-08-02 23:59:14 [ERROR] Pipeline failed on step 3: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-02 23:59:32 [INFO] Question: coloured barplot for different different attributes
2024-08-02 23:59:32 [INFO] Running PandasAI with google-palm LLM...
2024-08-02 23:59:32 [INFO] Prompt ID: 1b1ddd22-6026-4096-b274-f29cb567d422
2024-08-02 23:59:32 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-02 23:59:32 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-02 23:59:32 [INFO] Executing Step 1: CacheLookup
2024-08-02 23:59:32 [INFO] Executing Step 2: PromptGeneration
2024-08-02 23:59:32 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-04-27,164.38999938964844,119.41999816894533,47.27999877929688,240.97999572753903,149.94285583496094,10469900,MSFT
2021-10-26,187.47000122070312,251.3999938964844,19.559999465942383,82.43000030517578,155.05999755859375,89178300,VZ
2022-08-26,262.2699890136719,510.3599853515625,102.70999908447266,186.1999969482422,101.01000213623048,56787900,CRM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 coloured barplot for different different attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-02 23:59:32 [INFO] Executing Step 3: CodeGenerator
2024-08-02 23:59:33 [ERROR] Pipeline failed on step 3: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-02 23:59:58 [INFO] Question: barplot
2024-08-02 23:59:58 [INFO] Running PandasAI with google-palm LLM...
2024-08-02 23:59:58 [INFO] Prompt ID: 4e282794-8496-4c35-bf14-8aaaa4d5b8b1
2024-08-02 23:59:58 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-02 23:59:58 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-02 23:59:58 [INFO] Executing Step 1: CacheLookup
2024-08-02 23:59:58 [INFO] Executing Step 2: PromptGeneration
2024-08-02 23:59:58 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-08-01,7998956461,164.89999389648438,95.77999877929688,144.05999755859375,261.94000244140625,82656000,KO
2021-11-18,2818700415,21.68000030517578,194.5200042724609,164.22999572753906,53.42292404174805,8586000,COST
2021-11-16,8664698662,50.09999847412109,52.77999877929688,157.92999267578125,138.80661010742188,15207100,TSM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 barplot

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-02 23:59:58 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:00:01 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-08-01,7998956461,164.89999389648438,95.77999877929688,144.05999755859375,261.94000244140625,82656000,KO
2021-11-18,2818700415,21.68000030517578,194.5200042724609,164.22999572753906,53.42292404174805,8586000,COST
2021-11-16,8664698662,50.09999847412109,52.77999877929688,157.92999267578125,138.80661010742188,15207100,TSM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 barplot

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:00:01 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

result = { "type": "plot", "value": "temp_chart.png" }

# Plot the bar chart
plt.bar(dfs[0]["Stock Name"], dfs[0]["Volume"])
plt.savefig("temp_chart.png")
            ```
            
2024-08-03 00:00:01 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:00:01 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:00:01 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:00:01 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.bar(dfs[0]['Stock Name'], dfs[0]['Volume'])
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 00:00:01 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:00:09 [INFO] Executing Step 7: ResultValidation
2024-08-03 00:00:09 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 00:00:09 [INFO] Executing Step 8: ResultParsing
2024-08-03 00:00:33 [INFO] Question: correlation coefficent of all attributes
2024-08-03 00:00:33 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:00:33 [INFO] Prompt ID: b5931ae5-a5eb-4710-8545-54398068f94f
2024-08-03 00:00:33 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:00:33 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:00:33 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:00:33 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:00:33 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-11-03,5557142329,4257052215,137.41000366210938,80.12000274658203,4253441458,746400,BX
2021-11-02,3476625703,5895999306,58.7599983215332,125.7699966430664,3489522768,36076500,ENPH
2022-06-22,1684782618,7981522896,297.8900146484375,229.1499938964844,9974799674,4580300,COST
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 correlation coefficent of all attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:00:33 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:00:36 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-11-03,5557142329,4257052215,137.41000366210938,80.12000274658203,4253441458,746400,BX
2021-11-02,3476625703,5895999306,58.7599983215332,125.7699966430664,3489522768,36076500,ENPH
2022-06-22,1684782618,7981522896,297.8900146484375,229.1499938964844,9974799674,4580300,COST
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 correlation coefficent of all attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:00:36 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "dataframe", "value": dfs[0].corr() }
            ```
            
2024-08-03 00:00:36 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:00:36 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:00:36 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': dfs[0].corr()}
        ```
2024-08-03 00:00:36 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:00:36 [INFO] Executing Step 7: ResultValidation
2024-08-03 00:00:36 [INFO] Answer: {'type': 'dataframe', 'value':                Open      High       Low     Close  Adj Close    Volume
Open       1.000000  0.999723  0.999640  0.999309   0.999269 -0.251489
High       0.999723  1.000000  0.999550  0.999650   0.999648 -0.249329
Low        0.999640  0.999550  1.000000  0.999694   0.999599 -0.254478
Close      0.999309  0.999650  0.999694  1.000000   0.999946 -0.251915
Adj Close  0.999269  0.999648  0.999599  0.999946   1.000000 -0.249784
Volume    -0.251489 -0.249329 -0.254478 -0.251915  -0.249784  1.000000}
2024-08-03 00:00:36 [INFO] Executing Step 8: ResultParsing
2024-08-03 00:01:16 [INFO] Question: heatmap for correlation
2024-08-03 00:01:16 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:01:16 [INFO] Prompt ID: 2c123abf-0c71-4d2c-b744-a91031a69064
2024-08-03 00:01:16 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:01:16 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:01:16 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:01:16 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:01:16 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-05,32.349998474121094,106.20999908447266,18.75,2250006082,9424239710,12142100,DIS
2022-09-19,32.22999954223633,53.470001220703125,334.0299987792969,3739389630,3825314311,164723200,AMD
2021-12-10,100.91999816894533,81.66000366210938,26.190000534057617,4420585708,2991961393,7792100,ENPH
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 heatmap for correlation

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:01:16 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:01:26 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-05,32.349998474121094,106.20999908447266,18.75,2250006082,9424239710,12142100,DIS
2022-09-19,32.22999954223633,53.470001220703125,334.0299987792969,3739389630,3825314311,164723200,AMD
2021-12-10,100.91999816894533,81.66000366210938,26.190000534057617,4420585708,2991961393,7792100,ENPH
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 heatmap for correlation

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:01:26 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

result = { "type": "plot", "value": "temp_chart.png" }

# Plot the heatmap
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig("temp_chart.png")
            ```
            
2024-08-03 00:01:26 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:01:26 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:01:26 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:01:26 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 00:01:26 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:01:26 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
NameError: name 'sns' is not defined

2024-08-03 00:01:26 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 00:01:26 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 00:01:26 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 00:01:26 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-05,32.349998474121094,106.20999908447266,18.75,2250006082,9424239710,12142100,DIS
2022-09-19,32.22999954223633,53.470001220703125,334.0299987792969,3739389630,3825314311,164723200,AMD
2021-12-10,100.91999816894533,81.66000366210938,26.190000534057617,4420585708,2991961393,7792100,ENPH
</dataframe>


The user asked the following question:
### QUERY
 heatmap for correlation

You generated this python code:
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
NameError: name 'sns' is not defined


Fix the python code above and return the new python code:
2024-08-03 00:01:26 [INFO] Executing Step 1: CodeGenerator
2024-08-03 00:01:28 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-05,32.349998474121094,106.20999908447266,18.75,2250006082,9424239710,12142100,DIS
2022-09-19,32.22999954223633,53.470001220703125,334.0299987792969,3739389630,3825314311,164723200,AMD
2021-12-10,100.91999816894533,81.66000366210938,26.190000534057617,4420585708,2991961393,7792100,ENPH
</dataframe>


The user asked the following question:
### QUERY
 heatmap for correlation

You generated this python code:
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
NameError: name 'sns' is not defined


Fix the python code above and return the new python code:
            
2024-08-03 00:01:28 [INFO] Code generated:
            ```
            import seaborn as sns

result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
            ```
            
2024-08-03 00:01:28 [INFO] Executing Step 2: CodeCleaning
2024-08-03 00:01:28 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:01:28 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 00:01:28 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
NameError: name 'sns' is not defined

2024-08-03 00:01:28 [WARNING] Failed to execute code retrying with a correction framework [retry number: 2]
2024-08-03 00:01:28 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 00:01:28 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 00:01:28 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-05,32.349998474121094,106.20999908447266,18.75,2250006082,9424239710,12142100,DIS
2022-09-19,32.22999954223633,53.470001220703125,334.0299987792969,3739389630,3825314311,164723200,AMD
2021-12-10,100.91999816894533,81.66000366210938,26.190000534057617,4420585708,2991961393,7792100,ENPH
</dataframe>


The user asked the following question:
### QUERY
 heatmap for correlation

You generated this python code:
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.figure(figsize=(10, 10))
sns.heatmap(dfs[0].corr(), annot=True)
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
NameError: name 'sns' is not defined


Fix the python code above and return the new python code:
2024-08-03 00:01:28 [INFO] Executing Step 1: CodeGenerator
2024-08-03 00:01:29 [ERROR] Pipeline failed on step 1: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-03 00:01:29 [ERROR] Pipeline failed on step 6: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-03 00:02:01 [INFO] Question: heatmap for correlation between attributes
2024-08-03 00:02:01 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:02:01 [INFO] Prompt ID: c8a15aa2-f1d7-4e7b-80c3-1df44741b9d0
2024-08-03 00:02:01 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:02:01 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:02:01 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:02:01 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:02:02 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-12-07,47.91999816894531,0400779578,9180769766,2537520175,5121850585,98245300,BX
2022-04-14,485.489990234375,0314929267,3723421110,3907533163,7862357459,6682300,NOC
2022-06-01,48.61000061035156,8320253471,8353555061,9405939490,7496290545,27327900,F
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 heatmap for correlation between attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:02:02 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:02:04 [ERROR] Pipeline failed on step 3: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-03 00:02:14 [INFO] Question: scatterplot for correlation between attributes
2024-08-03 00:02:14 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:02:14 [INFO] Prompt ID: f4b241d2-d594-4c1e-919d-fdbbbed3ca18
2024-08-03 00:02:14 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:02:14 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:02:14 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:02:14 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:02:14 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-16,52.619998931884766,2292095927,35.290000915527344,137.99000549316406,3396744367,23217400,ENPH
2021-11-23,341.5633239746094,7313610486,116.70999908447266,17.540000915527344,7627856556,72924300,CRM
2021-10-26,13.789999961853027,1976327007,19.729999542236328,384.989990234375,0961183643,24484500,KO
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 scatterplot for correlation between attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:02:14 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:02:17 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-16,52.619998931884766,2292095927,35.290000915527344,137.99000549316406,3396744367,23217400,ENPH
2021-11-23,341.5633239746094,7313610486,116.70999908447266,17.540000915527344,7627856556,72924300,CRM
2021-10-26,13.789999961853027,1976327007,19.729999542236328,384.989990234375,0961183643,24484500,KO
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 scatterplot for correlation between attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:02:17 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

result = { "type": "plot", "value": "temp_chart.png" }

for df in dfs:
    plt.scatter(df["Open"], df["Close"])
    plt.savefig("temp_chart.png")
            ```
            
2024-08-03 00:02:17 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:02:17 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:02:17 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:02:17 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
for df in dfs:
    plt.scatter(df['Open'], df['Close'])
    plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 00:02:17 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:02:17 [INFO] Executing Step 7: ResultValidation
2024-08-03 00:02:17 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 00:02:17 [INFO] Executing Step 8: ResultParsing
2024-08-03 00:02:45 [INFO] Question: scatterplot for correlation between attributes and give the labeld plot
2024-08-03 00:02:45 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:02:45 [INFO] Prompt ID: 184072f4-4e00-469d-a767-9020bf25f371
2024-08-03 00:02:45 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:02:45 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:02:45 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:02:45 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:02:45 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-12,4213527775,113.88999938964844,2015232056,184.0,36.47418594360352,11488300,ENPH
2022-07-20,5612925562,334.739990234375,9871955325,157.63999938964844,11.38623332977295,8691500,BA
2021-11-08,5850593934,16.200000762939453,9136619663,58.650001525878906,88.69834899902344,20497000,NIO
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 scatterplot for correlation between attributes and give the labeld plot

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:02:45 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:02:48 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-12,4213527775,113.88999938964844,2015232056,184.0,36.47418594360352,11488300,ENPH
2022-07-20,5612925562,334.739990234375,9871955325,157.63999938964844,11.38623332977295,8691500,BA
2021-11-08,5850593934,16.200000762939453,9136619663,58.650001525878906,88.69834899902344,20497000,NIO
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 scatterplot for correlation between attributes and give the labeld plot

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:02:48 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

result = { "type": "plot", "value": "temp_chart.png" }

# Plot the scatterplot
plt.scatter(dfs[0]["Open"], dfs[0]["Close"])
plt.xlabel("Open")
plt.ylabel("Close")
plt.savefig("temp_chart.png")
            ```
            
2024-08-03 00:02:48 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:02:48 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:02:48 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:02:48 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.scatter(dfs[0]['Open'], dfs[0]['Close'])
plt.xlabel('Open')
plt.ylabel('Close')
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 00:02:48 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:02:48 [INFO] Executing Step 7: ResultValidation
2024-08-03 00:02:48 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 00:02:48 [INFO] Executing Step 8: ResultParsing
2024-08-03 00:06:10 [INFO] Question: piechart for gender
2024-08-03 00:06:10 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 00:06:10 [INFO] Prompt ID: d874e8c8-a0b0-4e7c-8950-90ff078639e2
2024-08-03 00:06:10 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 00:06:10 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 00:06:10 [INFO] Executing Step 1: CacheLookup
2024-08-03 00:06:10 [INFO] Executing Step 2: PromptGeneration
2024-08-03 00:06:10 [INFO] Using prompt: <dataframe>
dfs[0]:237519x7
State,Year,Type_code,Type,Gender,Age_group,Total
Gujarat,2002,Causes,Failure in Examination,Male,45-59,4265
Odisha,2004,Professional_Profile,By Overdose of sleeping pills,Female,30-44,1685
Madhya Pradesh,2003,Social_Status,Physical Abuse (Rape/Incest Etc.),Male,0-14,1113
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 piechart for gender

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 00:06:10 [INFO] Executing Step 3: CodeGenerator
2024-08-03 00:06:16 [INFO] Prompt used:
            
<dataframe>
dfs[0]:237519x7
State,Year,Type_code,Type,Gender,Age_group,Total
Gujarat,2002,Causes,Failure in Examination,Male,45-59,4265
Odisha,2004,Professional_Profile,By Overdose of sleeping pills,Female,30-44,1685
Madhya Pradesh,2003,Social_Status,Physical Abuse (Rape/Incest Etc.),Male,0-14,1113
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 piechart for gender

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 00:06:16 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

df = dfs[0]

# Create a pie chart
plt.pie(df['Gender'].value_counts(), labels=df['Gender'].unique(), autopct='%1.1f%%')
plt.title('Gender Distribution')
plt.savefig('temp_chart.png')

# Declare result var
result = { "type": "plot", "value": "temp_chart.png" }
            ```
            
2024-08-03 00:06:16 [INFO] Executing Step 4: CachePopulation
2024-08-03 00:06:16 [INFO] Executing Step 5: CodeCleaning
2024-08-03 00:06:16 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 00:06:16 [INFO] 
Code running:
```
df = dfs[0]
plt.pie(df['Gender'].value_counts(), labels=df['Gender'].unique(), autopct='%1.1f%%')
plt.title('Gender Distribution')
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
        ```
2024-08-03 00:06:16 [INFO] Executing Step 6: CodeExecution
2024-08-03 00:06:16 [INFO] Executing Step 7: ResultValidation
2024-08-03 00:06:16 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 00:06:16 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:36:44 [INFO] Question: standard deviation of all attributes
2024-08-03 18:36:44 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:36:44 [INFO] Prompt ID: 8de277f8-3374-4337-ae3b-0abfeacb3047
2024-08-03 18:36:44 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:36:44 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:36:44 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:36:44 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:36:45 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 standard deviation of all attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:36:45 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:36:55 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 standard deviation of all attributes

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:36:55 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here
result = { "type": "dataframe", "value": pd.DataFrame({
    "attribute": dfs[0].columns,
    "standard deviation": dfs[0].std()
}) }
            ```
            
2024-08-03 18:36:55 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:36:55 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:36:55 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}
        ```
2024-08-03 18:36:55 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:36:55 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6

2024-08-03 18:36:55 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 18:36:55 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:36:55 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:36:55 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6


Fix the python code above and return the new python code:
2024-08-03 18:36:55 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:36:57 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6


Fix the python code above and return the new python code:
            
2024-08-03 18:36:57 [INFO] Code generated:
            ```
            result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}
            ```
            
2024-08-03 18:36:57 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:36:57 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}
        ```
2024-08-03 18:36:57 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 123, in arrays_to_mgr
    arrays = _homogenize(arrays, index, dtype)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 620, in _homogenize
    com.require_length_match(val, index)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\common.py", line 571, in require_length_match
    raise ValueError(
ValueError: Length of values (8) does not match length of index (6300)

2024-08-03 18:36:57 [WARNING] Failed to execute code retrying with a correction framework [retry number: 2]
2024-08-03 18:36:57 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:36:57 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:36:57 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 123, in arrays_to_mgr
    arrays = _homogenize(arrays, index, dtype)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 620, in _homogenize
    com.require_length_match(val, index)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\common.py", line 571, in require_length_match
    raise ValueError(
ValueError: Length of values (8) does not match length of index (6300)


Fix the python code above and return the new python code:
2024-08-03 18:36:57 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:37:01 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 123, in arrays_to_mgr
    arrays = _homogenize(arrays, index, dtype)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 620, in _homogenize
    com.require_length_match(val, index)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\common.py", line 571, in require_length_match
    raise ValueError(
ValueError: Length of values (8) does not match length of index (6300)


Fix the python code above and return the new python code:
            
2024-08-03 18:37:01 [INFO] Code generated:
            ```
            result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}
            ```
            
2024-08-03 18:37:01 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:37:01 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}
        ```
2024-08-03 18:37:01 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6

2024-08-03 18:37:01 [WARNING] Failed to execute code retrying with a correction framework [retry number: 3]
2024-08-03 18:37:01 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:37:01 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:37:01 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6


Fix the python code above and return the new python code:
2024-08-03 18:37:01 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:37:03 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-14,7578300097,17.420000076293945,8157180459,149.11000061035156,8088080346,25000200,BA
2022-06-22,8237825493,147.4499969482422,4924881512,446.2999877929688,3316692996,4085100,INTC
2022-09-26,4183483150,368.3500061035156,2455481786,529.719970703125,7866827887,42190000,GOOG
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all attributes

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()})}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 118, in arrays_to_mgr
    index = _extract_index(arrays)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 680, in _extract_index
    raise ValueError(msg)
ValueError: array length 8 does not match index length 6


Fix the python code above and return the new python code:
            
2024-08-03 18:37:03 [INFO] Code generated:
            ```
            result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}
            ```
            
2024-08-03 18:37:03 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:37:03 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({'attribute': dfs[0].columns, 'standard deviation': dfs[0].std()}, index=dfs[0].index)}
        ```
2024-08-03 18:37:03 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\frame.py", line 664, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 493, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 123, in arrays_to_mgr
    arrays = _homogenize(arrays, index, dtype)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\internals\construction.py", line 620, in _homogenize
    com.require_length_match(val, index)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\common.py", line 571, in require_length_match
    raise ValueError(
ValueError: Length of values (8) does not match length of index (6300)

2024-08-03 18:37:03 [ERROR] Pipeline failed on step 6: Length of values (8) does not match length of index (6300)
2024-08-03 18:37:56 [INFO] Question: standard deviation of all 
2024-08-03 18:37:56 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:37:56 [INFO] Prompt ID: f49c94c9-584d-4dae-963c-395b64900b2b
2024-08-03 18:37:56 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:37:56 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:37:56 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:37:56 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:37:56 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-05-26,22.170000076293945,7390336118,19.520000457763672,109.55999755859376,8299789888,6824300,NFLX
2021-11-02,148.14999389648438,3169260285,208.5200042724609,136.2100067138672,7357131215,10561800,DIS
2022-08-16,178.00999450683594,3828927773,317.25,555.530029296875,8842794811,6325800,CRM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 standard deviation of all 

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:37:56 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:38:09 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-05-26,22.170000076293945,7390336118,19.520000457763672,109.55999755859376,8299789888,6824300,NFLX
2021-11-02,148.14999389648438,3169260285,208.5200042724609,136.2100067138672,7357131215,10561800,DIS
2022-08-16,178.00999450683594,3828927773,317.25,555.530029296875,8842794811,6325800,CRM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 standard deviation of all 

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:38:09 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "number", "value": dfs[0].std() }
            ```
            
2024-08-03 18:38:09 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:38:09 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:38:09 [INFO] 
Code running:
```
result = {'type': 'number', 'value': dfs[0].std()}
        ```
2024-08-03 18:38:09 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:38:09 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 97, in execute
    raise InvalidOutputValueMismatch(
pandasai.exceptions.InvalidOutputValueMismatch: Value type <class 'pandas.core.series.Series'> must match with type number

2024-08-03 18:38:09 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 18:38:09 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:38:09 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:38:09 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-05-26,22.170000076293945,7390336118,19.520000457763672,109.55999755859376,8299789888,6824300,NFLX
2021-11-02,148.14999389648438,3169260285,208.5200042724609,136.2100067138672,7357131215,10561800,DIS
2022-08-16,178.00999450683594,3828927773,317.25,555.530029296875,8842794811,6325800,CRM
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all 

You generated this python code:
result = {'type': 'number', 'value': dfs[0].std()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 97, in execute
    raise InvalidOutputValueMismatch(
pandasai.exceptions.InvalidOutputValueMismatch: Value type <class 'pandas.core.series.Series'> must match with type number


Fix the python code above and return the new python code:
2024-08-03 18:38:09 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:38:09 [INFO] Question: mean of all columns
2024-08-03 18:38:09 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:38:09 [INFO] Prompt ID: 13f5adcf-777e-49fd-9d57-67c4169be5ab
2024-08-03 18:38:09 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:38:09 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:38:09 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:38:09 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:38:09 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-12-10,168.27999877929688,5124780161,76.70999908447266,2550327363,25.38999938964844,3465500,AMD
2022-08-17,63.81999969482422,1775852695,144.2899932861328,1749709380,162.2100067138672,89178300,F
2022-02-16,164.38999938964844,1482119736,100.16000366210938,0054521978,15.374354362487791,78140700,TSLA
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of all columns

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:38:09 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:38:16 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-05-26,22.170000076293945,7390336118,19.520000457763672,109.55999755859376,8299789888,6824300,NFLX
2021-11-02,148.14999389648438,3169260285,208.5200042724609,136.2100067138672,7357131215,10561800,DIS
2022-08-16,178.00999450683594,3828927773,317.25,555.530029296875,8842794811,6325800,CRM
</dataframe>


The user asked the following question:
### QUERY
 standard deviation of all 

You generated this python code:
result = {'type': 'number', 'value': dfs[0].std()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 97, in execute
    raise InvalidOutputValueMismatch(
pandasai.exceptions.InvalidOutputValueMismatch: Value type <class 'pandas.core.series.Series'> must match with type number


Fix the python code above and return the new python code:
            
2024-08-03 18:38:16 [INFO] Code generated:
            ```
            result = {'type': 'number', 'value': dfs[0].std().values[0]}
            ```
            
2024-08-03 18:38:16 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:38:16 [INFO] 
Code running:
```
result = {'type': 'number', 'value': dfs[0].std().values[0]}
        ```
2024-08-03 18:38:16 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:38:16 [INFO] Answer: {'type': 'number', 'value': 134.98967546255543}
2024-08-03 18:38:16 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:38:21 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-12-10,168.27999877929688,5124780161,76.70999908447266,2550327363,25.38999938964844,3465500,AMD
2022-08-17,63.81999969482422,1775852695,144.2899932861328,1749709380,162.2100067138672,89178300,F
2022-02-16,164.38999938964844,1482119736,100.16000366210938,0054521978,15.374354362487791,78140700,TSLA
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of all columns

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:38:21 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "dataframe", "value": pd.DataFrame({col: dfs[0][col].mean() for col in dfs[0].columns}) }
            ```
            
2024-08-03 18:38:21 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:38:21 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:38:21 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({col: dfs[0][col].mean() for col in dfs[0].columns})}
        ```
2024-08-03 18:38:21 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:38:21 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1630, in _ensure_numeric
    x = float(x)
ValueError: could not convert string to float: '2021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-29'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1634, in _ensure_numeric
    x = complex(x)
ValueError: complex() arg is a malformed string

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "<string>", line 1, in <dictcomp>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11847, in mean
    return NDFrame.mean(self, axis, skipna, level, numeric_only, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11401, in mean
    return self._stat_function(
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11353, in _stat_function
    return self._reduce(
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\series.py", line 4816, in _reduce
    return op(delegate, skipna=skipna, **kwds)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 93, in _f
    return f(*args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 155, in f
    result = alt(values, axis=axis, skipna=skipna, **kwds)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 418, in new_func
    result = func(values, axis=axis, skipna=skipna, mask=mask, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 706, in nanmean
    the_sum = _ensure_numeric(values.sum(axis, dtype=dtype_sum))
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1637, in _ensure_numeric
    raise TypeError(f"Could not convert {x} to numeric") from err
TypeError: Could not convert 2021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-29 to numeric

2024-08-03 18:38:21 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 18:38:21 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:38:21 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:38:21 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-12-10,168.27999877929688,5124780161,76.70999908447266,2550327363,25.38999938964844,3465500,AMD
2022-08-17,63.81999969482422,1775852695,144.2899932861328,1749709380,162.2100067138672,89178300,F
2022-02-16,164.38999938964844,1482119736,100.16000366210938,0054521978,15.374354362487791,78140700,TSLA
</dataframe>


The user asked the following question:
### QUERY
 mean of all columns

You generated this python code:
result = {'type': 'dataframe', 'value': pd.DataFrame({col: dfs[0][col].mean() for col in dfs[0].columns})}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1630, in _ensure_numeric
    x = float(x)
ValueError: could not convert string to float: '2021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-29'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1634, in _ensure_numeric
    x = complex(x)
ValueError: complex() arg is a malformed string

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "<string>", line 1, in <dictcomp>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11847, in mean
    return NDFrame.mean(self, axis, skipna, level, numeric_only, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11401, in mean
    return self._stat_function(
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\generic.py", line 11353, in _stat_function
    return self._reduce(
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\series.py", line 4816, in _reduce
    return op(delegate, skipna=skipna, **kwds)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 93, in _f
    return f(*args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 155, in f
    result = alt(values, axis=axis, skipna=skipna, **kwds)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 418, in new_func
    result = func(values, axis=axis, skipna=skipna, mask=mask, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 706, in nanmean
    the_sum = _ensure_numeric(values.sum(axis, dtype=dtype_sum))
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandas\core\nanops.py", line 1637, in _ensure_numeric
    raise TypeError(f"Could not convert {x} to numeric") from err
TypeError: Could not convert 2021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-292021-09-302021-10-012021-10-042021-10-052021-10-062021-10-072021-10-082021-10-112021-10-122021-10-132021-10-142021-10-152021-10-182021-10-192021-10-202021-10-212021-10-222021-10-252021-10-262021-10-272021-10-282021-10-292021-11-012021-11-022021-11-032021-11-042021-11-052021-11-082021-11-092021-11-102021-11-112021-11-122021-11-152021-11-162021-11-172021-11-182021-11-192021-11-222021-11-232021-11-242021-11-262021-11-292021-11-302021-12-012021-12-022021-12-032021-12-062021-12-072021-12-082021-12-092021-12-102021-12-132021-12-142021-12-152021-12-162021-12-172021-12-202021-12-212021-12-222021-12-232021-12-272021-12-282021-12-292021-12-302021-12-312022-01-032022-01-042022-01-052022-01-062022-01-072022-01-102022-01-112022-01-122022-01-132022-01-142022-01-182022-01-192022-01-202022-01-212022-01-242022-01-252022-01-262022-01-272022-01-282022-01-312022-02-012022-02-022022-02-032022-02-042022-02-072022-02-082022-02-092022-02-102022-02-112022-02-142022-02-152022-02-162022-02-172022-02-182022-02-222022-02-232022-02-242022-02-252022-02-282022-03-012022-03-022022-03-032022-03-042022-03-072022-03-082022-03-092022-03-102022-03-112022-03-142022-03-152022-03-162022-03-172022-03-182022-03-212022-03-222022-03-232022-03-242022-03-252022-03-282022-03-292022-03-302022-03-312022-04-012022-04-042022-04-052022-04-062022-04-072022-04-082022-04-112022-04-122022-04-132022-04-142022-04-182022-04-192022-04-202022-04-212022-04-222022-04-252022-04-262022-04-272022-04-282022-04-292022-05-022022-05-032022-05-042022-05-052022-05-062022-05-092022-05-102022-05-112022-05-122022-05-132022-05-162022-05-172022-05-182022-05-192022-05-202022-05-232022-05-242022-05-252022-05-262022-05-272022-05-312022-06-012022-06-022022-06-032022-06-062022-06-072022-06-082022-06-092022-06-102022-06-132022-06-142022-06-152022-06-162022-06-172022-06-212022-06-222022-06-232022-06-242022-06-272022-06-282022-06-292022-06-302022-07-012022-07-052022-07-062022-07-072022-07-082022-07-112022-07-122022-07-132022-07-142022-07-152022-07-182022-07-192022-07-202022-07-212022-07-222022-07-252022-07-262022-07-272022-07-282022-07-292022-08-012022-08-022022-08-032022-08-042022-08-052022-08-082022-08-092022-08-102022-08-112022-08-122022-08-152022-08-162022-08-172022-08-182022-08-192022-08-222022-08-232022-08-242022-08-252022-08-262022-08-292022-08-302022-08-312022-09-012022-09-022022-09-062022-09-072022-09-082022-09-092022-09-122022-09-132022-09-142022-09-152022-09-162022-09-192022-09-202022-09-212022-09-222022-09-232022-09-262022-09-272022-09-282022-09-29 to numeric


Fix the python code above and return the new python code:
2024-08-03 18:38:21 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:38:22 [ERROR] Pipeline failed on step 1: 400 Request payload size exceeds the limit: 50000 bytes.
2024-08-03 18:38:22 [ERROR] Pipeline failed on step 6: 400 Request payload size exceeds the limit: 50000 bytes.
2024-08-03 18:41:33 [INFO] Question: mean
2024-08-03 18:41:33 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:41:33 [INFO] Prompt ID: ed2d3d40-6451-4f2d-9d9a-3fba864c227f
2024-08-03 18:41:33 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:41:33 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:41:33 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:41:33 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:41:33 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-04-07,22.559999465942383,164.41900634765625,7864701802,53.43999862670898,115.37000274658205,37737400,PYPL
2022-05-05,261.70001220703125,172.47999572753906,0866203705,99.11000061035156,204.1000061035156,56168000,TSM
2021-11-15,166.3699951171875,179.2884979248047,3399023498,15.6899995803833,362.8233337402344,57429800,XPEV
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:41:33 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:41:47 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-04-07,22.559999465942383,164.41900634765625,7864701802,53.43999862670898,115.37000274658205,37737400,PYPL
2022-05-05,261.70001220703125,172.47999572753906,0866203705,99.11000061035156,204.1000061035156,56168000,TSM
2021-11-15,166.3699951171875,179.2884979248047,3399023498,15.6899995803833,362.8233337402344,57429800,XPEV
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:41:47 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "dataframe", "value": pd.DataFrame({"mean": [df["Close"].mean() for df in dfs]}) }
            ```
            
2024-08-03 18:41:47 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:41:47 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:41:47 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': pd.DataFrame({'mean': [df['Close'].mean() for df in dfs]})}
        ```
2024-08-03 18:41:47 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:41:47 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:41:47 [INFO] Answer: {'type': 'dataframe', 'value':          mean
0  174.657624}
2024-08-03 18:41:47 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:42:02 [INFO] Question: mean of high
2024-08-03 18:42:02 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:42:02 [INFO] Prompt ID: bd56a675-6a80-4c88-ab36-08db8ff3ff8a
2024-08-03 18:42:02 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:42:02 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:42:02 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:42:02 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:42:02 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-07,157.08999633789062,3963452382,6976238030,0603919076,66.30000305175781,141493800,TSM
2022-06-14,300.2300109863281,7455701472,9010325926,4194569327,187.7899932861328,48881000,XPEV
2022-03-03,142.1999969482422,9712750731,8679518313,9912857840,107.19400024414062,4134700,ENPH
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of high

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:42:02 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:42:11 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-07,157.08999633789062,3963452382,6976238030,0603919076,66.30000305175781,141493800,TSM
2022-06-14,300.2300109863281,7455701472,9010325926,4194569327,187.7899932861328,48881000,XPEV
2022-03-03,142.1999969482422,9712750731,8679518313,9912857840,107.19400024414062,4134700,ENPH
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of high

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:42:11 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "number", "value": dfs[0]["High"].mean() }
            ```
            
2024-08-03 18:42:11 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:42:11 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:42:11 [INFO] 
Code running:
```
result = {'type': 'number', 'value': dfs[0]['High'].mean()}
        ```
2024-08-03 18:42:11 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:42:11 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:42:11 [INFO] Answer: {'type': 'number', 'value': 177.59458917163667}
2024-08-03 18:42:11 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:44:09 [INFO] Question: 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    
2024-08-03 18:44:09 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:44:09 [INFO] Prompt ID: fce1cb1a-0955-4ec3-b53e-cb7191b9cbcf
2024-08-03 18:44:09 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:44:09 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:44:09 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:44:09 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:44:09 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:44:09 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:44:13 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:44:13 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import plotly.express as px

# Write code here

df = dfs[0]

fig = px.line(df, x="Date", y="High", title="line chart of TESLA stock")

# Declare result var: 
result = { "type": "plot", "value": fig }
            ```
            
2024-08-03 18:44:13 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:44:13 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:44:13 [INFO] 
Code running:
```
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
        ```
2024-08-03 18:44:13 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:44:13 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.

2024-08-03 18:44:13 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 18:44:13 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:44:13 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:44:13 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
2024-08-03 18:44:13 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:44:23 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
            
2024-08-03 18:44:23 [INFO] Code generated:
            ```
            import plotly.express as px

df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
            ```
            
2024-08-03 18:44:23 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:44:23 [INFO] 
Code running:
```
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
        ```
2024-08-03 18:44:23 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.

2024-08-03 18:44:23 [WARNING] Failed to execute code retrying with a correction framework [retry number: 2]
2024-08-03 18:44:23 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:44:23 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:44:23 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
2024-08-03 18:44:23 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:44:31 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
            
2024-08-03 18:44:31 [INFO] Code generated:
            ```
            import plotly.express as px

df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
            ```
            
2024-08-03 18:44:31 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:44:31 [INFO] 
Code running:
```
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
        ```
2024-08-03 18:44:31 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.

2024-08-03 18:44:31 [WARNING] Failed to execute code retrying with a correction framework [retry number: 3]
2024-08-03 18:44:31 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 18:44:31 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 18:44:31 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
2024-08-03 18:44:31 [INFO] Executing Step 1: CodeGenerator
2024-08-03 18:44:38 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-09-09,1345997747,172.39999389648438,0044032203,51.83000183105469,4952852027,1579700,AAPL
2022-09-13,0573511063,551.780029296875,1831583349,86.01000213623047,0804233786,5428200,ENPH
2022-09-29,6406950703,169.97999572753906,3830361067,79.61000061035156,3335064846,11370500,BA
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: line chart of TESLA stock 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.


Fix the python code above and return the new python code:
            
2024-08-03 18:44:38 [INFO] Code generated:
            ```
            import plotly.express as px

df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
            ```
            
2024-08-03 18:44:38 [INFO] Executing Step 2: CodeCleaning
2024-08-03 18:44:38 [INFO] 
Code running:
```
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='line chart of TESLA stock')
result = {'type': 'plot', 'value': fig}
        ```
2024-08-03 18:44:38 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 124, in import_dependency
    module = importlib.import_module(name)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 992, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'plotly'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 156, in execute_code
    environment: dict = get_environment(self._additional_dependencies)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 61, in get_environment
    **{
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 64, in <dictcomp>
    if hasattr(import_dependency(lib["module"]), lib["name"])
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\helpers\optional.py", line 127, in import_dependency
    raise ImportError(msg) from exc
ImportError: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.

2024-08-03 18:44:38 [ERROR] Pipeline failed on step 6: Missing optional dependency 'plotly.express'.  Use pip or conda to install plotly.express.
2024-08-03 18:47:38 [INFO] Question: 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    
2024-08-03 18:47:38 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:47:38 [INFO] Prompt ID: 161651d7-f5a8-46d3-a699-a028a9536319
2024-08-03 18:47:38 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:47:38 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:47:38 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:47:38 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:47:38 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-12,137.47149658203125,22.280000686645508,5435434424,109.16000366210938,1882102262,17959400,META
2022-04-11,51.43999862670898,35.97999954223633,3560670365,141.66000366210938,6517522466,48917200,VZ
2022-01-25,158.76199340820312,397.8500061035156,1511959355,49.70000076293945,9580152311,5262100,PYPL
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:47:38 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:47:44 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-12,137.47149658203125,22.280000686645508,5435434424,109.16000366210938,1882102262,17959400,META
2022-04-11,51.43999862670898,35.97999954223633,3560670365,141.66000366210938,6517522466,48917200,VZ
2022-01-25,158.76199340820312,397.8500061035156,1511959355,49.70000076293945,9580152311,5262100,PYPL
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:47:44 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import plotly.express as px

# Write code here

df = dfs[0]

fig = px.line(df, x="Date", y="High", title="Line chart of TESLA stock price")

# Declare result var: 
result = { "type": "plot", "value": fig }
            ```
            
2024-08-03 18:47:44 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:47:44 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:47:44 [INFO] 
Code running:
```
df = dfs[0]
fig = px.line(df, x='Date', y='High', title='Line chart of TESLA stock price')
result = {'type': 'plot', 'value': fig}
        ```
2024-08-03 18:47:44 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:47:44 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:47:44 [INFO] Answer: {'type': 'plot', 'value': Figure({
    'data': [{'hovertemplate': 'Date=%{x}<br>High=%{y}<extra></extra>',
              'legendgroup': '',
              'line': {'color': '#000001', 'dash': 'solid'},
              'marker': {'symbol': 'circle'},
              'mode': 'lines',
              'name': '',
              'showlegend': False,
              'type': 'scattergl',
              'x': array(['2021-09-30', '2021-10-01', '2021-10-04', ..., '2022-09-27',
                          '2022-09-28', '2022-09-29'], dtype=object),
              'xaxis': 'x',
              'y': array([263.04333496, 260.26000977, 268.98999023, ...,  14.80000019,
                           13.42099953,  12.85000038]),
              'yaxis': 'y'}],
    'layout': {'legend': {'tracegroupgap': 0},
               'template': '...',
               'title': {'text': 'Line chart of TESLA stock price'},
               'xaxis': {'anchor': 'y', 'domain': [0.0, 1.0], 'title': {'text': 'Date'}},
               'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0], 'title': {'text': 'High'}}}
})}
2024-08-03 18:47:44 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:48:01 [INFO] Question: 
    You are a data visualization assistant. Create a line chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    
2024-08-03 18:48:01 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:48:01 [INFO] Prompt ID: 54d0863f-b133-4f63-acff-6976988079a2
2024-08-03 18:48:01 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:48:01 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:48:01 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:48:01 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:48:01 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-11-18,15.670000076293944,105.56999969482422,48.02000045776367,1084770515,140.39178466796875,8438700,XPEV
2022-01-26,628.1799926757812,182.4600067138672,13.359999656677246,7015598586,284.82000732421875,50028900,NIO
2021-11-23,229.4600067138672,21.350000381469727,168.57249450683594,8300762159,182.97999572753903,64452200,ZS
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:48:01 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:48:12 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-11-18,15.670000076293944,105.56999969482422,48.02000045776367,1084770515,140.39178466796875,8438700,XPEV
2022-01-26,628.1799926757812,182.4600067138672,13.359999656677246,7015598586,284.82000732421875,50028900,NIO
2021-11-23,229.4600067138672,21.350000381469727,168.57249450683594,8300762159,182.97999572753903,64452200,ZS
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a line chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: line
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:48:12 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

df = dfs[0]

# Create a line chart
plt.plot(df['Date'], df['High'])

# Add a title
plt.title('Line chart of TESLA stock price')

# Add axis labels
plt.xlabel('Date')
plt.ylabel('High')

# Save the chart as a png file
plt.savefig('temp_chart.png')

# Declare result var
result = {
    "type": "plot",
    "value": "temp_chart.png"
}
            ```
            
2024-08-03 18:48:12 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:48:12 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:48:12 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 18:48:12 [INFO] 
Code running:
```
df = dfs[0]
plt.plot(df['Date'], df['High'])
plt.title('Line chart of TESLA stock price')
plt.xlabel('Date')
plt.ylabel('High')
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
        ```
2024-08-03 18:48:12 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:48:12 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 18:48:12 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 18:48:14 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:48:14 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 18:48:14 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:48:27 [INFO] Question: 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    
2024-08-03 18:48:27 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 18:48:27 [INFO] Prompt ID: 04063cd1-2f8e-4d7e-8590-2c6cce3a144e
2024-08-03 18:48:27 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 18:48:27 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 18:48:27 [INFO] Executing Step 1: CacheLookup
2024-08-03 18:48:27 [INFO] Executing Step 2: PromptGeneration
2024-08-03 18:48:28 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-20,7296116373,74.48500061035156,6184282899,163.25399780273438,8128424378,6973000,PYPL
2022-05-09,1718996464,27.459999084472656,6588074930,545.469970703125,1204746175,21144300,XPEV
2022-04-18,7544080120,40.08000183105469,9809144035,220.17999267578125,3919843715,110746000,F
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 18:48:28 [INFO] Executing Step 3: CodeGenerator
2024-08-03 18:48:32 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-07-20,7296116373,74.48500061035156,6184282899,163.25399780273438,8128424378,6973000,PYPL
2022-05-09,1718996464,27.459999084472656,6588074930,545.469970703125,1204746175,21144300,XPEV
2022-04-18,7544080120,40.08000183105469,9809144035,220.17999267578125,3919843715,110746000,F
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: Line chart of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 18:48:32 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

# Declare result var: 
result = { "type": "plot", "value": "temp_chart.png" }

# Create a bar chart using the matplotlib library
plt.bar(dfs[0]["Date"], dfs[0]["High"])
plt.title("Line chart of TESLA stock price")
plt.xlabel("Date")
plt.ylabel("High")
plt.savefig("temp_chart.png")
            ```
            
2024-08-03 18:48:32 [INFO] Executing Step 4: CachePopulation
2024-08-03 18:48:32 [INFO] Executing Step 5: CodeCleaning
2024-08-03 18:48:32 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 18:48:32 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
plt.bar(dfs[0]['Date'], dfs[0]['High'])
plt.title('Line chart of TESLA stock price')
plt.xlabel('Date')
plt.ylabel('High')
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 18:48:32 [INFO] Executing Step 6: CodeExecution
2024-08-03 18:48:32 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 18:48:32 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 18:48:47 [INFO] Executing Step 7: ResultValidation
2024-08-03 18:48:47 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 18:48:47 [INFO] Executing Step 8: ResultParsing
2024-08-03 18:49:19 [INFO] HTTP Request: POST https://api.replicate.com/v1/predictions "HTTP/1.1 401 Unauthorized"
2024-08-03 18:50:55 [INFO] HTTP Request: POST https://api.replicate.com/v1/predictions "HTTP/1.1 401 Unauthorized"
2024-08-03 18:52:21 [INFO] HTTP Request: POST https://api.replicate.com/v1/predictions "HTTP/1.1 401 Unauthorized"
2024-08-03 19:04:48 [INFO] Question: 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    
2024-08-03 19:04:48 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 19:04:48 [INFO] Prompt ID: f17f5080-f70c-4f1d-a76c-659ee37c7837
2024-08-03 19:04:48 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 19:04:48 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 19:04:48 [INFO] Executing Step 1: CacheLookup
2024-08-03 19:04:48 [INFO] Executing Step 2: PromptGeneration
2024-08-03 19:04:49 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 19:04:49 [INFO] Executing Step 3: CodeGenerator
2024-08-03 19:05:01 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 19:05:01 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import plotly.express as px

# Write code here

result = {
    "type": "plot",
    "value": px.bar(
        dfs[0],
        x="Date",
        y="High",
        title="High Price of TSLA",
    ).to_image(),
}
            ```
            
2024-08-03 19:05:01 [INFO] Executing Step 4: CachePopulation
2024-08-03 19:05:01 [INFO] Executing Step 5: CodeCleaning
2024-08-03 19:05:01 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='High Price of TSLA').to_image()}
        ```
2024-08-03 19:05:01 [INFO] Executing Step 6: CodeExecution
2024-08-03 19:05:02 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido


2024-08-03 19:05:02 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 19:05:02 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 19:05:02 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 19:05:02 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='High Price of TSLA').to_image()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido



Fix the python code above and return the new python code:
2024-08-03 19:05:02 [INFO] Executing Step 1: CodeGenerator
2024-08-03 19:05:04 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

You generated this python code:
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='High Price of TSLA').to_image()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido



Fix the python code above and return the new python code:
            
2024-08-03 19:05:04 [INFO] Code generated:
            ```
            result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='High Price of TSLA').to_html()}
            ```
            
2024-08-03 19:05:04 [INFO] Executing Step 2: CodeCleaning
2024-08-03 19:05:04 [INFO] 
Code running:
```

        ```
2024-08-03 19:05:04 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned

2024-08-03 19:05:04 [WARNING] Failed to execute code retrying with a correction framework [retry number: 2]
2024-08-03 19:05:04 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 19:05:04 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 19:05:04 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

You generated this python code:


It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned


Fix the python code above and return the new python code:
2024-08-03 19:05:04 [INFO] Executing Step 1: CodeGenerator
2024-08-03 19:05:08 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-03-28,40.40999984741211,166.60000610351562,177.41000366210938,6130408513,135.45681762695312,12399200,XPEV
2022-05-02,114.13999938964844,147.69400024414062,17.530000686645508,4132706913,143.2533416748047,65384000,F
2022-05-12,110.49949645996094,107.9499969482422,236.88999938964844,7160154165,142.14999389648438,16936300,PG
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: 

    Please analyze the data and create the specified visualization.
    

You generated this python code:


It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned


Fix the python code above and return the new python code:
            
2024-08-03 19:05:08 [INFO] Code generated:
            ```
            import plotly.express as px

df = pd.DataFrame({
    'Date': ['2021-09-30', '2021-10-01', '2021-10-04', '2021-10-05', '2021-10-06'],
    'Open': [260.333344, 259.466675, 265.500000, 261.600006, 258.733337],
    'High': [263.043335, 260.260010, 268.989990, 265.769989, 262.220001],
    'Low': [258.333344, 254.529999, 258.706665, 258.066681, 257.739990],
    'Close': [258.493347, 258.406677, 260.510010, 260.196655, 260.916656],
    'Adj Close': [258.493347, 258.406677, 260.510010, 260.196655, 260.916656],
    'Volume': [53868000, 51094200, 91449900, 55297800, 43898400],
    'Stock Name': ['TSLA']
})

fig = px.bar(df, x='Date', y='High', title='High Price of TSLA')
fig.show()
            ```
            
2024-08-03 19:05:08 [INFO] Executing Step 2: CodeCleaning
2024-08-03 19:05:08 [ERROR] Pipeline failed on step 2: All arrays must be of the same length
2024-08-03 19:05:08 [ERROR] Pipeline failed on step 6: All arrays must be of the same length
2024-08-03 19:05:30 [INFO] Question: 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    
2024-08-03 19:05:30 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 19:05:30 [INFO] Prompt ID: c3ba4316-383c-4ae9-8f24-c7a77030d910
2024-08-03 19:05:30 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 19:05:30 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 19:05:30 [INFO] Executing Step 1: CacheLookup
2024-08-03 19:05:30 [INFO] Executing Step 2: PromptGeneration
2024-08-03 19:05:30 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 19:05:30 [INFO] Executing Step 3: CodeGenerator
2024-08-03 19:05:39 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 19:05:39 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import plotly.express as px

# Write code here

result = {
    "type": "plot",
    "value": px.bar(
        dfs[0],
        x="Date",
        y="High",
        title="bar plot of TESLA stock price",
    ).to_image(),
}
            ```
            
2024-08-03 19:05:39 [INFO] Executing Step 4: CachePopulation
2024-08-03 19:05:39 [INFO] Executing Step 5: CodeCleaning
2024-08-03 19:05:39 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='bar plot of TESLA stock price').to_image()}
        ```
2024-08-03 19:05:39 [INFO] Executing Step 6: CodeExecution
2024-08-03 19:05:39 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido


2024-08-03 19:05:39 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 19:05:39 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 19:05:39 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 19:05:39 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

You generated this python code:
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='bar plot of TESLA stock price').to_image()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido



Fix the python code above and return the new python code:
2024-08-03 19:05:39 [INFO] Executing Step 1: CodeGenerator
2024-08-03 19:05:41 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

You generated this python code:
result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='bar plot of TESLA stock price').to_image()}

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 1, in <module>
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\basedatatypes.py", line 3772, in to_image
    return pio.to_image(self, *args, **kwargs)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\plotly\io\_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError: 
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido



Fix the python code above and return the new python code:
            
2024-08-03 19:05:41 [INFO] Code generated:
            ```
            import plotly.express as px

result = {'type': 'plot', 'value': px.bar(dfs[0], x='Date', y='High', title='bar plot of TESLA stock price').to_html()}
            ```
            
2024-08-03 19:05:41 [INFO] Executing Step 2: CodeCleaning
2024-08-03 19:05:41 [INFO] 
Code running:
```

        ```
2024-08-03 19:05:41 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned

2024-08-03 19:05:41 [WARNING] Failed to execute code retrying with a correction framework [retry number: 2]
2024-08-03 19:05:41 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 19:05:41 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 19:05:41 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

You generated this python code:


It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned


Fix the python code above and return the new python code:
2024-08-03 19:05:41 [INFO] Executing Step 1: CodeGenerator
2024-08-03 19:05:54 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-25,141.75999450683594,3355310521,99.13500213623048,1233386031,54.550559997558594,7115700,KO
2022-06-13,97.0,1683129619,179.3350067138672,8716533816,108.63999938964844,52704000,ENPH
2022-01-26,60.54999923706055,2837386620,226.32000732421875,7693833746,277.7200012207031,3574500,TSM
</dataframe>


The user asked the following question:
### QUERY
 
    You are a data visualization assistant. Create a bar chart using the plotly library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: plotly
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

You generated this python code:


It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 175, in execute_code
    raise NoResultFoundError("No result returned")
pandasai.exceptions.NoResultFoundError: No result returned


Fix the python code above and return the new python code:
            
2024-08-03 19:05:54 [INFO] Code generated:
            ```
            import plotly.express as px

df = pd.DataFrame({
    'Date': ['2021-09-30', '2021-10-01', '2021-10-04', '2021-10-05', '2021-10-06'],
    'Open': [260.333344, 259.466675, 265.500000, 261.600006, 258.733337],
    'High': [263.043335, 260.260010, 268.989990, 265.769989, 262.220001],
    'Low': [258.333344, 254.529999, 258.706665, 258.066681, 257.739990],
    'Close': [258.493347, 258.406677, 260.510010, 260.196655, 260.916656],
    'Adj Close': [258.493347, 258.406677, 260.510010, 260.196655, 260.916656],
    'Volume': [53868000, 51094200, 91449900, 55297800, 43898400],
    'Stock Name': ['TSLA']
})

fig = px.bar(df, x='Date', y='High', title='Bar plot of TESLA stock price')
fig.show()
            ```
            
2024-08-03 19:05:54 [INFO] Executing Step 2: CodeCleaning
2024-08-03 19:05:54 [ERROR] Pipeline failed on step 2: All arrays must be of the same length
2024-08-03 19:05:54 [ERROR] Pipeline failed on step 6: All arrays must be of the same length
2024-08-03 19:06:22 [INFO] Question: 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    
2024-08-03 19:06:22 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 19:06:22 [INFO] Prompt ID: ca4bacf0-d5e1-4638-b2bb-49689a231852
2024-08-03 19:06:22 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 19:06:22 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 19:06:22 [INFO] Executing Step 1: CacheLookup
2024-08-03 19:06:22 [INFO] Executing Step 2: PromptGeneration
2024-08-03 19:06:22 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-02,371.05999755859375,53.369998931884766,63.88999938964844,286.44000244140625,93.63999938964844,47792800,CRM
2022-02-28,55.25,19.100000381469727,140.27000427246094,216.97999572753903,231.47999572753903,42571600,ENPH
2022-08-16,171.32000732421875,11.359999656677246,42.27999877929688,93.1999969482422,131.75,1640600,COST
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 19:06:22 [INFO] Executing Step 3: CodeGenerator
2024-08-03 19:06:37 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-02,371.05999755859375,53.369998931884766,63.88999938964844,286.44000244140625,93.63999938964844,47792800,CRM
2022-02-28,55.25,19.100000381469727,140.27000427246094,216.97999572753903,231.47999572753903,42571600,ENPH
2022-08-16,171.32000732421875,11.359999656677246,42.27999877929688,93.1999969482422,131.75,1640600,COST
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 
    You are a data visualization assistant. Create a bar chart using the matplotlib library.

    Data Sample:
             Date        Open        High         Low       Close   Adj Close    Volume Stock Name
0  2021-09-30  260.333344  263.043335  258.333344  258.493347  258.493347  53868000       TSLA
1  2021-10-01  259.466675  260.260010  254.529999  258.406677  258.406677  51094200       TSLA
2  2021-10-04  265.500000  268.989990  258.706665  260.510010  260.510010  91449900       TSLA
3  2021-10-05  261.600006  265.769989  258.066681  260.196655  260.196655  55297800       TSLA
4  2021-10-06  258.733337  262.220001  257.739990  260.916656  260.916656  43898400       TSLA

    Data Summary:
                  Open         High          Low        Close    Adj Close        Volume
count  6300.000000  6300.000000  6300.000000  6300.000000  6300.000000  6.300000e+03
mean    174.748195   177.594589   171.734715   174.657624   173.756012  2.906806e+07
std     134.989675   136.795419   133.049955   134.949601   134.582934  3.342181e+07
min      11.050000    11.210000    10.610000    11.060000    10.837500  3.078000e+05
25%      78.170002    79.891003    76.792501    78.110001    78.110001  5.857700e+06
50%     145.475128   147.475006   143.501251   145.505005   144.248146  1.518830e+07
75%     225.665001   230.662498   221.452496   225.785000   225.785000  4.122928e+07
max     692.349976   700.989990   686.090027   691.690002   691.690002  3.116452e+08

    Chart Details:
    - Chart Type: bar
    - Library: matplotlib
    - X-axis: Date
    - Y-axis: High
    - Title: bar plot of TESLA stock price

    Please analyze the data and create the specified visualization.
    

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 19:06:37 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Write code here

df = dfs[0]

# Create a bar chart
plt.bar(df["Date"], df["High"])

# Add a title
plt.title("Bar plot of TESLA stock price")

# Save the chart as a png file
plt.savefig("temp_chart.png")

# Declare result var
result = {
    "type": "plot",
    "value": "temp_chart.png",
}
            ```
            
2024-08-03 19:06:37 [INFO] Executing Step 4: CachePopulation
2024-08-03 19:06:37 [INFO] Executing Step 5: CodeCleaning
2024-08-03 19:06:37 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 19:06:37 [INFO] 
Code running:
```
df = dfs[0]
plt.bar(df['Date'], df['High'])
plt.title('Bar plot of TESLA stock price')
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
        ```
2024-08-03 19:06:37 [INFO] Executing Step 6: CodeExecution
2024-08-03 19:06:37 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 19:06:37 [INFO] Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2024-08-03 19:06:49 [INFO] Executing Step 7: ResultValidation
2024-08-03 19:06:49 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 19:06:49 [INFO] Executing Step 8: ResultParsing
2024-08-03 21:38:59 [INFO] Question: mean of low
2024-08-03 21:38:59 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 21:38:59 [INFO] Prompt ID: 7527028e-cd66-42fe-bd51-24237224f9a2
2024-08-03 21:38:59 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 21:38:59 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 21:38:59 [INFO] Executing Step 1: CacheLookup
2024-08-03 21:38:59 [INFO] Executing Step 2: PromptGeneration
2024-08-03 21:38:59 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-10-01,3536830477,4077341120,144.99000549316406,2758384464,115.87890625,9665600,TSM
2022-03-18,7753663423,4992359685,73.45999908447266,3585701011,48.93571472167969,5766800,PG
2022-08-25,7525912445,7614571643,152.02999877929688,0727413001,174.35000610351562,16809300,CRM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of low

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 21:38:59 [INFO] Executing Step 3: CodeGenerator
2024-08-03 21:39:07 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-10-01,3536830477,4077341120,144.99000549316406,2758384464,115.87890625,9665600,TSM
2022-03-18,7753663423,4992359685,73.45999908447266,3585701011,48.93571472167969,5766800,PG
2022-08-25,7525912445,7614571643,152.02999877929688,0727413001,174.35000610351562,16809300,CRM
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 mean of low

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 21:39:07 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "number", "value": dfs[0]["Low"].mean() }
            ```
            
2024-08-03 21:39:07 [INFO] Executing Step 4: CachePopulation
2024-08-03 21:39:07 [INFO] Executing Step 5: CodeCleaning
2024-08-03 21:39:07 [INFO] 
Code running:
```
result = {'type': 'number', 'value': dfs[0]['Low'].mean()}
        ```
2024-08-03 21:39:07 [INFO] Executing Step 6: CodeExecution
2024-08-03 21:39:07 [INFO] Executing Step 7: ResultValidation
2024-08-03 21:39:07 [INFO] Answer: {'type': 'number', 'value': 171.7347153279138}
2024-08-03 21:39:07 [INFO] Executing Step 8: ResultParsing
2024-08-03 21:39:34 [INFO] Question: bar plot of low
2024-08-03 21:39:34 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 21:39:34 [INFO] Prompt ID: 47c47b1d-5598-401d-960d-9a8961d33ff0
2024-08-03 21:39:34 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 21:39:34 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 21:39:34 [INFO] Executing Step 1: CacheLookup
2024-08-03 21:39:34 [INFO] Executing Step 2: PromptGeneration
2024-08-03 21:39:34 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2021-10-05,145.25999450683594,4776655320,0143963881,64.87999725341797,0779951225,2950600,CRM
2021-10-21,244.6499938964844,8740985268,4934777965,133.6905059814453,2482863074,1646600,KO
2021-12-15,280.3500061035156,7606902766,8442358501,17.889999389648438,4897586997,51006100,COST
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 bar plot of low

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 21:39:34 [INFO] Executing Step 3: CodeGenerator
2024-08-03 21:39:36 [ERROR] Pipeline failed on step 3: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2024-08-03 21:39:49 [INFO] Question: bar graph of low
2024-08-03 21:39:49 [INFO] Running PandasAI with google-palm LLM...
2024-08-03 21:39:49 [INFO] Prompt ID: f4ba97f9-555c-4554-b0f2-93d6fa415629
2024-08-03 21:39:49 [INFO] Executing Pipeline: GenerateChatPipeline
2024-08-03 21:39:49 [INFO] Executing Step 0: ValidatePipelineInput
2024-08-03 21:39:49 [INFO] Executing Step 1: CacheLookup
2024-08-03 21:39:49 [INFO] Executing Step 2: PromptGeneration
2024-08-03 21:39:49 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-23,169.92999267578125,178.3125,62.29999923706055,113.88700103759766,186.97999572753903,17173100,PG
2022-01-27,181.02999877929688,338.5400085449219,116.70999908447266,58.65999984741211,141.85299682617188,2384700,BX
2022-07-19,204.41000366210935,145.94000244140625,147.8699951171875,294.3566589355469,148.87344360351562,712000,AAPL
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 bar graph of low

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-08-03 21:39:49 [INFO] Executing Step 3: CodeGenerator
2024-08-03 21:39:55 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-23,169.92999267578125,178.3125,62.29999923706055,113.88700103759766,186.97999572753903,17173100,PG
2022-01-27,181.02999877929688,338.5400085449219,116.70999908447266,58.65999984741211,141.85299682617188,2384700,BX
2022-07-19,204.41000366210935,145.94000244140625,147.8699951171875,294.3566589355469,148.87344360351562,712000,AAPL
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 bar graph of low

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-08-03 21:39:55 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Write code here

result = { "type": "plot", "value": "temp_chart.png" }

# Plot the bar chart
fig = pd.DataFrame(dfs[0]["Low"]).plot.bar()
fig.savefig("temp_chart.png")
            ```
            
2024-08-03 21:39:55 [INFO] Executing Step 4: CachePopulation
2024-08-03 21:39:55 [INFO] Executing Step 5: CodeCleaning
2024-08-03 21:39:55 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 21:39:55 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
fig = pd.DataFrame(dfs[0]['Low']).plot.bar()
fig.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 21:39:55 [INFO] Executing Step 6: CodeExecution
2024-08-03 21:40:06 [ERROR] Failed with error: Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
AttributeError: 'Axes' object has no attribute 'savefig'

2024-08-03 21:40:06 [WARNING] Failed to execute code retrying with a correction framework [retry number: 1]
2024-08-03 21:40:06 [INFO] Executing Pipeline: ErrorCorrectionPipeline
2024-08-03 21:40:06 [INFO] Executing Step 0: ErrorPromptGeneration
2024-08-03 21:40:06 [INFO] Using prompt: <dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-23,169.92999267578125,178.3125,62.29999923706055,113.88700103759766,186.97999572753903,17173100,PG
2022-01-27,181.02999877929688,338.5400085449219,116.70999908447266,58.65999984741211,141.85299682617188,2384700,BX
2022-07-19,204.41000366210935,145.94000244140625,147.8699951171875,294.3566589355469,148.87344360351562,712000,AAPL
</dataframe>


The user asked the following question:
### QUERY
 bar graph of low

You generated this python code:
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
fig = pd.DataFrame(dfs[0]['Low']).plot.bar()
fig.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
AttributeError: 'Axes' object has no attribute 'savefig'


Fix the python code above and return the new python code:
2024-08-03 21:40:06 [INFO] Executing Step 1: CodeGenerator
2024-08-03 21:40:17 [INFO] Prompt used:
            
<dataframe>
dfs[0]:6300x8
Date,Open,High,Low,Close,Adj Close,Volume,Stock Name
2022-02-23,169.92999267578125,178.3125,62.29999923706055,113.88700103759766,186.97999572753903,17173100,PG
2022-01-27,181.02999877929688,338.5400085449219,116.70999908447266,58.65999984741211,141.85299682617188,2384700,BX
2022-07-19,204.41000366210935,145.94000244140625,147.8699951171875,294.3566589355469,148.87344360351562,712000,AAPL
</dataframe>


The user asked the following question:
### QUERY
 bar graph of low

You generated this python code:
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
fig = pd.DataFrame(dfs[0]['Low']).plot.bar()
fig.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')

It fails with the following error:
Traceback (most recent call last):
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 85, in execute
    result = self.execute_code(code_to_run, code_context)
  File "C:\Users\pande\anaconda3\envs\llm-env\lib\site-packages\pandasai\pipelines\chat\code_execution.py", line 171, in execute_code
    exec(code, environment)
  File "<string>", line 3, in <module>
AttributeError: 'Axes' object has no attribute 'savefig'


Fix the python code above and return the new python code:
            
2024-08-03 21:40:17 [INFO] Code generated:
            ```
            result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
fig = pd.DataFrame(dfs[0]['Low']).plot.bar()
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
            ```
            
2024-08-03 21:40:17 [INFO] Executing Step 2: CodeCleaning
2024-08-03 21:40:17 [INFO] Saving charts to C:\Users\pande\Downloads\LLM-CSV\exports\charts\temp_chart.png
2024-08-03 21:40:17 [INFO] 
Code running:
```
result = {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
fig = pd.DataFrame(dfs[0]['Low']).plot.bar()
plt.savefig('C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png')
        ```
2024-08-03 21:40:48 [INFO] Executing Step 7: ResultValidation
2024-08-03 21:40:48 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/pande/Downloads/LLM-CSV/exports/charts/temp_chart.png'}
2024-08-03 21:40:48 [INFO] Executing Step 8: ResultParsing
2024-08-03 21:41:47 [INFO] HTTP Request: POST https://api.replicate.com/v1/predictions "HTTP/1.1 201 Created"
2024-08-03 21:41:47 [INFO] HTTP Request: GET https://api.replicate.com/v1/models/a16z-infra/llama13b-v2-chat/versions/df7690f1994d94e96ad9d568eac121aecf50684a0b0963b25a41cc40061269e5 "HTTP/1.1 200 OK"
2024-08-03 21:41:48 [INFO] HTTP Request: GET https://api.replicate.com/v1/predictions/cwdmywq8asrj60ch3419zbgwq8 "HTTP/1.1 200 OK"
2024-08-03 21:41:49 [INFO] HTTP Request: GET https://api.replicate.com/v1/predictions/cwdmywq8asrj60ch3419zbgwq8 "HTTP/1.1 200 OK"
2024-08-03 21:41:51 [INFO] HTTP Request: GET https://api.replicate.com/v1/predictions/cwdmywq8asrj60ch3419zbgwq8 "HTTP/1.1 200 OK"
2024-08-03 21:41:53 [INFO] HTTP Request: GET https://api.replicate.com/v1/predictions/cwdmywq8asrj60ch3419zbgwq8 "HTTP/1.1 200 OK"
